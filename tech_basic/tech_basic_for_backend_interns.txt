JSON:

What is JSON? Where is it used? Why JSON?

- JavaScript Object Notation (JSON) is a standard text-based format for representing structured
data based on JavaScript object syntax. It is commonly used for transmitting data in web
applications (e.g., sending some data from the server to the client, so it can be displayed on a
web page, or vice versa).
- Data is stored in a set of key-value pairs. This data is human readable, which makes JSON perfect
for manual editing. From this little snippet you can see that keys are wrapped in double quotes,
a colon separates the key and the value, and the value can be of different types. Key-value sets
are separated by a comma.

REST API:

What does acronym REST API stand for? HTTP protocol, status codes, requests and responses

- REST APIs enable you to develop all kinds of web applications having all possible CRUD (create,
retrieve, update, delete) operations.

- REST is an acronym for REpresentational State Transfer and an architectural style for distributed
hypermedia systems. Like other architectural styles,REST has its guiding principles and constraints.
These principles must be satisfied if a service interface needs to be referred to as RESTful.

-  HTTP GET
Use GET requests to retrieve resource representation/information only – and not modify it in any
way. As GET requests do not change the resource’s state, these are said to be safe methods.

Additionally, GET APIs should be idempotent. Making multiple identical requests must produce the
same result every time until another API (POST or PUT) has changed the state of the resource on
the server.

- HTTP POST
Use POST APIs to create new subordinate resources, e.g., a file is subordinate to a directory
containing it or a row is subordinate to a database table.

When talking strictly about REST, POST methods are used to create a new resource into the collection
of resources.

- HTTP PUT
Use PUT APIs primarily to update an existing resource (if the resource does not exist, then API may
decide to create a new resource or not).

If the request passes through a cache and the Request-URI identifies one or more currently cached
entities, those entries SHOULD be treated as stale. Responses to PUT method are not cacheable.

- HTTP DELETE
As the name applies, DELETE APIs delete the resources (identified by the Request-URI).

DELETE operations are idempotent. If you DELETE a resource, it’s removed from the collection
of resources.

- HTTP defines these standard status codes that can be used to convey the results of a client’s
request. The status codes are divided into five categories.

1xx: Informational – Communicates transfer protocol-level information.
2xx: Success – Indicates that the client’s request was accepted successfully.
3xx: Redirection – Indicates that the client must take some additional action in order to complete
     their request.
4xx: Client Error – This category of error status codes points the finger at clients.
5xx: Server Error – The server takes responsibility for these error status codes.

ORM :

What is ORM, when should you use one? Examples of popular Python ORMs. Active record implementation
vs data mapper implementation.

- An ORM (Object Relational Mapper) is a tool that allows you to interact with your database using
the object-oriented paradigm. Therefore, ORMs are generally implemented as libraries in languages
that support object-oriented programming.

- ORMs provide a high-level abstraction upon a relational database that allows a developer to write
Python code instead of SQL to create, read, update and delete data and schemas in their database.
Developers can use the programming language they are comfortable with to work with a database
instead of writing SQL statements or stored procedures.

- SQLAlchemy, Django ORM, Peewee ORM

- The big difference between the Active Record style and the Data Mapper style is, the Data Mapper
style completely separates your domain from the persistence layer. This means none of your model
objects know anything about the database.

- The big benefit of the Data Mapper pattern is, your domain objects don’t need to know anything
about how they are stored in the database. This means that your objects will be lighter because
they don’t have to inherit the full ORM, but also there will be a stricter, more formal process for
interacting with the database because you can’t just call the save() method anywhere in your code.